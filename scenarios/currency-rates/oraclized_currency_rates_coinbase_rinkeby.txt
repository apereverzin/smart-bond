var Web3 = require('web3');
var util = require('ethereumjs-util');
var tx = require('ethereumjs-tx');
var lightwallet = require('eth-lightwallet');
var txutils = lightwallet.txutils;
var abijs = require('ethereumjs-abi')
var web3Rinkeby = new Web3(new Web3.providers.HttpProvider('https://rinkeby.infura.io/'))

function sendRaw(rawTx, privateKey) {
    var privateKey = new Buffer(privateKey, 'hex');
    var transaction = new tx(rawTx);
    transaction.sign(privateKey);
    var serializedTx = transaction.serialize().toString('hex');
    return web3Rinkeby.eth.sendRawTransaction('0x' + serializedTx);
};

function waitForTransactionCompletion(txHash) {
    const interval = 500;
    const transactionReceiptAsync = function(resolve, reject) {
        web3Rinkeby.eth.getTransactionReceipt(txHash, (error, receipt) => {
            if (error) {
                console.log('Rejected');
                reject(error);
            } else if (receipt == null) {
                setTimeout(
                    () => transactionReceiptAsync(resolve, reject), interval
                );
            } else {
                resolve(receipt);
            }
        });
    };
    return new Promise(transactionReceiptAsync);
};

1) Create contract
var exchangeRatesAbiText = fs.readFileSync('/private/etc/Work1/ethereum/capexmove/Demo/smartbond-full/build/CurrencyRatesCoinBase.abi').toString()
var exchangeRatesAbi = JSON.parse(exchangeRatesAbiText)
var exchangeRatesBytecodeText = fs.readFileSync('/private/etc/Work1/ethereum/capexmove/Demo/smartbond-full/build/CurrencyRatesCoinBase.bin').toString()
var exchangeRatesBytecode = '0x' + exchangeRatesBytecodeText
var ExchangeRates = web3Rinkeby.eth.contract(exchangeRatesAbi)
var parameterTypes = ["uint256"]
var parameterValues = ["86400"]
var encoded = abijs.rawEncode(parameterTypes, parameterValues)
var params = encoded.toString('hex')
var rawTx = {
    nonce: web3Rinkeby.toHex(web3Rinkeby.eth.getTransactionCount(bondIssuerAddress)),
    gasLimit: web3Rinkeby.toHex(5000000),
    gasPrice: web3Rinkeby.toHex(40000000000),
    data: exchangeRatesBytecode + params
}

var exchangeRatesDeployedContractAddress;
var exchangeRatesContractInstance;

var txHash = sendRaw(rawTx, bondIssuerPrivateKey)
waitForTransactionCompletion(txHash).
then(
    function(receipt) {
        exchangeRatesDeployedContractAddress = web3Rinkeby.eth.getTransactionReceipt(txHash).contractAddress
        exchangeRatesContractInstance = ExchangeRates.at(exchangeRatesDeployedContractAddress)
        console.log(exchangeRatesContractInstance.getCurrencyRate('GBP').toNumber())
    }
)
#0xe03569722fe1becfaa7f5f54bb88aa900f32a8de


2) Update rate
var txOptions = {
    nonce: web3Rinkeby.toHex(web3Rinkeby.eth.getTransactionCount(bondIssuerAddress)),
    gasLimit: web3Rinkeby.toHex(1600000),
    gasPrice: web3Rinkeby.toHex(20000000000),
    to: exchangeRatesContractInstance.address,
    value: 10000000000000000
}
var rawTx = txutils.functionTx(exchangeRatesAbi, 'update', ['GBP'], txOptions);
sendRaw(rawTx, bondIssuerPrivateKey)
function waitForCurrencyRateUpdate() {
    const interval = 500;
    const currencyRateSetAsync = function(resolve, reject) {
        var rate = exchangeRatesContractInstance.getCurrencyRate('GBP').toNumber();
        if (rate == 0) {
            setTimeout(
                () => currencyRateSetAsync(resolve, reject), interval
            );
        } else {
            resolve(rate);
        }
    };
    return new Promise(currencyRateSetAsync);
};
waitForCurrencyRateUpdate().
then(function(rate) {
    console.log('GBP Rate: ' + rate);
});



3) Request the rate
exchangeRatesContractInstance.getCurrencyRate('GBP').toNumber()


4) Set exchangeRatesContractInstance
var exchangeRatesAbiText = fs.readFileSync('/private/etc/Work1/ethereum/capexmove/Demo/smartbond-full/build/CurrencyRatesCoinBase.abi').toString()
var exchangeRatesAbi = JSON.parse(exchangeRatesAbiText)
var exchangeRatesBytecodeText = fs.readFileSync('/private/etc/Work1/ethereum/capexmove/Demo/smartbond-full/build/CurrencyRatesCoinBase.bin').toString()
var exchangeRatesBytecode = '0x' + exchangeRatesBytecodeText
var ExchangeRates = web3Rinkeby.eth.contract(exchangeRatesAbi)
exchangeRatesContractInstance = ExchangeRates.at('address')
