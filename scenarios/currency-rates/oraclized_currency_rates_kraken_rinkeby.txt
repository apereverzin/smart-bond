var Web3 = require('web3');
var util = require('ethereumjs-util');
var tx = require('ethereumjs-tx');
var lightwallet = require('eth-lightwallet');
var txutils = lightwallet.txutils;
var abijs = require('ethereumjs-abi')
var web3Rinkeby = new Web3(new Web3.providers.HttpProvider('https://rinkeby.infura.io/'))

var th;
function sendRaw(rawTx, privateKey) {
    var privateKey = new Buffer(privateKey, 'hex');
    var transaction = new tx(rawTx);
    transaction.sign(privateKey);
    var serializedTx = transaction.serialize().toString('hex');
    web3Rinkeby.eth.sendRawTransaction(
    '0x' + serializedTx, function(err, result) {
        if(err) {
            console.log(err);
        } else {
            console.log(result);
            th = result;
        }
    });
}

var exchangeRatesAbiText = fs.readFileSync('/private/etc/Work1/ethereum/capexmove/Demo/smartbond-full/build/CurrencyRatesKraken.abi').toString()
var exchangeRatesAbi = JSON.parse(exchangeRatesAbiText)
var exchangeRatesBytecodeText = fs.readFileSync('/private/etc/Work1/ethereum/capexmove/Demo/smartbond-full/build/CurrencyRatesKraken.bin').toString()
var exchangeRatesBytecode = '0x' + exchangeRatesBytecodeText
var ExchangeRates = web3Rinkeby.eth.contract(exchangeRatesAbi)
var parameterTypes = ["uint256"]
var parameterValues = ["3600"]
var encoded = abijs.rawEncode(parameterTypes, parameterValues)
var params = encoded.toString('hex')
var rawTx = {
    nonce: web3Rinkeby.toHex(web3Rinkeby.eth.getTransactionCount(bondIssuerAddress)),
    gasLimit: web3Rinkeby.toHex(5000000),
    gasPrice: web3Rinkeby.toHex(40000000000),
    data: exchangeRatesBytecode + params
}
sendRaw(rawTx, bondIssuerPrivateKey)
web3Rinkeby.eth.getTransactionReceipt(th)
var exchangeRatesDeployedContractAddress = web3Rinkeby.eth.getTransactionReceipt(th).contractAddress
var exchangeRatesContractInstance = ExchangeRates.at(exchangeRatesDeployedContractAddress)
exchangeRatesContractInstance.getCurrencyRate('GBP').toNumber()
#0xe03569722fe1becfaa7f5f54bb88aa900f32a8de

var txOptions = {
    nonce: web3Rinkeby.toHex(web3Rinkeby.eth.getTransactionCount(bondIssuerAddress)),
    gasLimit: web3Rinkeby.toHex(1600000),
    gasPrice: web3Rinkeby.toHex(20000000000),
    to: exchangeRatesContractInstance.address,
    value: 10000000000000000
}
var rawTx = txutils.functionTx(exchangeRatesAbi, 'update', ['GBP'], txOptions);
sendRaw(rawTx, bondIssuerPrivateKey)
web3Rinkeby.eth.getTransactionReceipt(th)

exchangeRatesContractInstance.getCurrencyRate('GBP').toNumber()
